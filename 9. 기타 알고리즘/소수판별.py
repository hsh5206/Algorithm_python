# 소수 판별
# 2 ~ 자기자신 - 1 까지 모두 나누었을 때, 나누어 떨어지지 않으면 소수
# 약수의 특징에서 착안, 2 ~ 자기자신의 제곱근 + 1 로 범위가 줄어듬
# (math 라이브러리의 sqrt -> 제곱근)
# 그렇다면 특정한 수의 범위안에 존재하는 모든 소수를 찾아야 하면?

# 에라토스테네스의 체 알고리즘
# 1. 2부터 N까지의 모든 자연수를 나열
# 2. 남은 수 중에서 아직 처리하지 않은 가장 작은 수 i를 찾음
# 3. 남은 수 중에서 i의 배수를 모두 제거 (i빼고)
# 4. 2~3번 반복

# 에라토스테네스의 체 + 약수의 특징

import math
n = 1000  # 2부터 1000까지의 모든 수에 대하여 소수 판별
array = [True for i in range(n + 1)]

# 2부터 n의 제곱근까지의 모든 수를 확인
for i in range(2, int(math.sqrt(n)) + 1):
    if array[i] == True:  # i가 소수인경우 (남은 수인 경우)
        # i를 제외한 i의 배수를 배열에서 제거(False)
        j = 2
        while i * j <= n:
            array[i * j] = False
            j += 1

# 모든 소수 출력
for i in range(2, n + 1):
    if array[i]:  # 남은 수(True) 출력
        print(i, end=' ')
